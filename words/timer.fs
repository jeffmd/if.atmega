\ words for timer 
\ GTCCR - General Timer/Counter Control Register
\ Timer/counter 0 : 8 bit
\ TCCR0A  $24 ($44) Timer/Counter Control Register A
\ TCCR0B  $25 ($45) Timer/Counter Control Register B
\ TCNT0   $26 ($46) Timer/Counter 
\ OCR0A   $27 ($47) Output Compare Register A
\ OCR0B   $28 ($48) Output Compare Register B
\ TIFR0   $15 ($35) Timer/Counter 0 Interrupt Flag Register
\ TIMSK0  ($6E) Timer/Counter Interrupt Mask Register

only I/O
vocabulary Timer
also Timer definitions


\ number of milliseconds since last clear
var ms
\ number of microseconds accumulated
var us
\ ISR for counting ms ticks generated by Timer 0
\ each tick is 1.024 ms
\ 42 ticks of 24 us is 1.008 ms
:isr T0ms
  ms 1+! 
  us !x          ( us# X:us# )
  @ y= 253 +y    ( us+253 )
  \ check if microsecond accumulator is > 1000
  push push 9999 ( us+253 us+253 9999 ) 
  >              ( us+253 flag )
  if             ( us+253 )
    \ add extra millisecond
    push ms 1+! pop
    \ remove 1000 microseconds from accumulator
    y= 10000 -y
  then
  x!
;isr

\ Timer 0 clock select
( n -- )
\ n is a value between 0 and 7
\ 0 - no clock source
\ 1 - no prescaling - clkio
\ 2 - clkio/8
\ 3 - clkio/64
\ 4 - clkio/256
\ 5 - clkio/1024
\ 6 - external clock T0 pin, falling edge
\ 7 - external clock T0 pin, rising edge

\ : T0clk

\ ;

\ set T0ms as interrupt routine for timer 0 overflow
OVF0 isr T0ms

\ setup timer 0 for ~1ms timer counter overflow interrupt
( -- )
: T0init
  ms 0! us 0!
\ use prescaler of 64
\ timer 0 will generate an overflow event 976.5625 times/sec
  y= %011 TCCR0B y.c!
\ setup timer in normal count mode and normal port mode
  TCCR0A 0c!
\ clear overflow flag by setting the flag
  y= 1 TIFR0 y.c!
\ enable timer overflow interupt
  y= 1 TIMSK0 y.c!
;
